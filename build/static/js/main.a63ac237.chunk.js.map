{"version":3,"sources":["components/Home.js","components/Categories.js","components/Products.js","components/Store.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Component","Categories","className","CategoryList","map","category","Link","to","concat","CategoryId","key","CategoryName","Products","props","_this","Object","classCallCheck","this","id","possibleConstructorReturn","getPrototypeOf","call","categoryId","products","ProductList","filter","product","CategoryID","parseInt","state","ProductID","src","ProductImage","alt","ModelName","ModelNumber","UnitCost","Store","console","log","match","params","Fragment","components_Categories","components_Products","Nav","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App","BrowserRouter","components_Nav","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"woEAUeA,sMANP,OACIC,EAAAC,EAAAC,cAAA,8BAHOC,8BC+BJC,mLAVP,OACIJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACdC,EAAaC,IAAI,SAACC,GACf,OAAOR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMJ,UAAU,yCAAyCK,GAAE,UAAAC,OAAYH,EAASI,YAAeC,IAAKL,EAASI,YAAaJ,EAASM,wBAtBjIX,qBCsEVY,cAtEX,SAAAA,EAAYC,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAEf,IAAMM,GADNJ,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAH,GAAAS,KAAAJ,KAAMJ,KACUA,MAAMS,YAAc,EAChCC,EAAWC,EAAYC,OAAO,SAAUC,GACxC,OAAOA,EAAQC,aAAeC,SAASV,KAJ5B,OAMfJ,EAAKe,MAAQ,CACTN,SAAYA,GAPDT,wEA0Bf,OAEIjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACVe,KAAKY,MAAMN,SAASnB,IAAI,SAACsB,GAsBtB,OAZI7B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WAAWQ,IAAKgB,EAAQI,WACnCjC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,QACfL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAAe6B,IAAK,kBAAoBL,EAAQM,aAAcC,IAAKP,EAAQQ,YACpFrC,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAcwB,EAAQQ,WACpCrC,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAb,4BAA+BwB,EAAQS,aACvCtC,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAb,sBAA8BwB,EAAQU,mEAjCtCvB,EAAOgB,GACnC,GAAIhB,EAAMS,aAAeO,EAAMP,WAAY,CACvC,IAAIJ,EAAKL,EAAMS,WACXC,EAAWC,EAAYC,OAAO,SAAUC,GACxC,OAAOA,EAAQC,aAAeC,SAASV,KAE3C,MAAO,CACHI,WAAcT,EAAMS,WACpBC,SAAYA,GAGpB,OAAO,YAxBQvB,aCkCRqC,cA/BX,SAAAA,EAAYxB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoB,GACdvB,EAAAC,OAAAI,EAAA,EAAAJ,CAAAE,KAAAF,OAAAK,EAAA,EAAAL,CAAAsB,GAAAhB,KAAAJ,KAAMJ,IACNyB,QAAQC,IAAIzB,EAAKD,MAAM2B,MAAMC,OAAOvB,IAFtBJ,wEAKd,OACIjB,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACI7C,EAAAC,EAAAC,cAAA,sCAAUkB,KAAKJ,MAAM2B,MAAMC,OAAOvB,GAAlC,mCACCrB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACfL,EAAAC,EAAAC,cAAC4C,EAAD,OAEA9C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACfL,EAAAC,EAAAC,cAAC6C,EAAD,CAAUtB,WAAYL,KAAKJ,MAAM2B,MAAMC,OAAOvB,OAIlDrB,EAAAC,EAAAC,cAAA,wDAORuC,QAAQC,IAAI,WAAatB,KAAKJ,MAAM2B,MAAMC,OAAOvB,iDAGjDoB,QAAQC,IAAI,YAActB,KAAKJ,MAAM2B,MAAMC,OAAOvB,WA5BtClB,aCoBL6C,mLArBP,OACIhD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,oDACXL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,eAAe4C,KAAK,KAAjC,kBACAjD,EAAAC,EAAAC,cAAA,UAAQG,UAAU,iBAAiB6C,KAAK,SAASC,cAAY,WAAWC,cAAY,yBAAyBC,gBAAc,wBAAwBC,gBAAc,QAAQC,aAAW,qBAChLvD,EAAAC,EAAAC,cAAA,QAAMG,UAAU,yBAGpBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,2BAA2BgB,GAAG,yBACzCrB,EAAAC,EAAAC,cAAA,MAAIG,UAAU,sBACVL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACVL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMJ,UAAU,WAAWK,GAAG,KAA9B,SAEJV,EAAAC,EAAAC,cAAA,MAAIG,UAAU,YACVL,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMJ,UAAU,WAAWK,GAAG,UAA9B,oBAfVP,aCuBHqD,mLAdX,OACExD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACAzD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACfL,EAAAC,EAAAC,cAACwD,EAAD,MACK1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/D,IACjCC,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWtB,aAP9BrC,aCGE4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASvB,MACvB,2DCZNwB,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a63ac237.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <h1>Home Page</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React,{ Component } from 'react';\r\nimport CategoryList from './categories.json';\r\nimport { Link, NavLink } from 'react-router-dom';\r\n\r\nclass Categories extends Component{\r\n    // constructor(props){\r\n    //     super(props);\r\n    // }\r\n    // toggleClass(id,evt){\r\n    //     //console.log(id);\r\n    //    //evt.target.classList.toggle('active');\r\n    //     // evt.target.classList.toggleClass('active')\r\n    //     // const currentState = this.state.active;\r\n    //     // this.setState({ active: !currentState });\r\n    //     // var btn = $(evt.target);\r\n    //     // btn.parents().find(\"button\").removeClass('active');\r\n    //     // btn.addClass('active');\r\n    //     console.log(id)\r\n    //     console.log(evt)\r\n    //     console.log(this)\r\n    //      this.props.add(id);\r\n    // }\r\n    render(){\r\n        return(\r\n            <div className=\"list-group\">\r\n            {CategoryList.map((category)=>{\r\n                return <Link className=\"list-group-item list-group-item-action\" to={`/store/${category.CategoryId}`}  key={category.CategoryId}>{category.CategoryName}</Link>\r\n            })}         \r\n            \r\n          </div>\r\n        );\r\n    }\r\n}\r\nexport default Categories;","import React, { Component } from 'react';\r\nimport ProductList from './products.json';\r\n\r\nclass Products extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const id = this.props.categoryId || 1;\r\n        let products = ProductList.filter(function (product) {\r\n            return product.CategoryID === parseInt(id);\r\n        });\r\n        this.state = {\r\n            \"products\": products\r\n        };\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.categoryId !== state.categoryId) {\r\n            var id = props.categoryId;\r\n            let products = ProductList.filter(function (product) {\r\n                return product.CategoryID === parseInt(id);\r\n            });\r\n            return {\r\n                \"categoryId\": props.categoryId,\r\n                \"products\": products\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    render() {\r\n        return (\r\n            // <div className=\"card-deck\">\r\n            <div className=\"row\">\r\n                {this.state.products.map((product) => {\r\n                    // var show = <div className=\"card\" key={product.ProductID}>\r\n                    //     <img className=\"card-img-top\" src={\"ProductImages/\" + product.ProductImage} alt={product.ModelName} />\r\n                    //     <div className=\"card-body\">\r\n                    //         <h6 className=\"card-title\">{product.ModelName}</h6>\r\n                    //         <p>產品型號 {product.ModelNumber}</p>\r\n                    //         <p>優惠價 {product.UnitCost}</p>\r\n                    //     </div>\r\n                    // </div>;\r\n                    var show =\r\n                        <div className=\"col-sm-4\" key={product.ProductID}>\r\n                            <div className=\"cart\">\r\n                            <img className=\"card-img-top\" src={\"/ProductImages/\" + product.ProductImage} alt={product.ModelName} />\r\n                                  <div className=\"card-body\">\r\n                                    <h6 className=\"card-title\">{product.ModelName}</h6>\r\n                                    <p className=\"cart-text\">產品型號 {product.ModelNumber}</p>\r\n                                    <p className=\"cart-text\">優惠價 {product.UnitCost}</p>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ;\r\n\r\n                    return show;\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n    // componentDidUpdate(prevProps) {\r\n    //     // Typical usage (don't forget to compare props):\r\n    //     if (this.props.categoryId !== prevProps.categoryId) {\r\n    //         var id = this.props.categoryId;\r\n    //         let products = ProductList.filter(function(product){\r\n    //             return product.CategoryID === parseInt(id);\r\n    //         });\r\n    //         this.setState({\r\n    //                 \"products\":products\r\n    //             });\r\n    //     }\r\n    //   }\r\n\r\n}\r\nexport default Products;","import React, {Component} from 'react';\r\nimport {Link } from 'react-router-dom';\r\nimport Categories from './Categories';\r\nimport Products from './Products';\r\n\r\nclass Store extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        console.log(this.props.match.params.id);\r\n    }\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <h1>分類編號 {this.props.match.params.id} 的產品資料</h1>\r\n                 <div className=\"row\">\r\n                    <div className=\"col-3\">\r\n                    <Categories />\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                    <Products categoryId={this.props.match.params.id} />\r\n                    </div>\r\n                 </div>\r\n                \r\n                <hr />\r\n               \r\n            </React.Fragment>\r\n            \r\n        )\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"didMount\" + this.props.match.params.id);\r\n    }\r\n    componentDidUpdate(){\r\n        console.log(\"didUpdate\" + this.props.match.params.id);\r\n    }\r\n}\r\n\r\nexport default Store;","import React, { Component } from 'react';\r\nimport {Link } from 'react-router-dom';\r\nclass Nav extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-3\">\r\n                <a className=\"navbar-brand\" href=\"/\">FrontEnd-React</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/Store\">Store</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\nexport default Nav;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Link} from 'react-router-dom';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/bootstrap/dist/js/bootstrap.bundle';\nimport Home from './components/Home';\nimport Store from './components/Store';\nimport Nav from './components/Nav';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n      <div className=\"container\">\n      <Nav />\n           <Route exact path=\"/\" component={Home} />\n           <Route path=\"/store/:id?\" component={Store} />\n      </div>      \n      </BrowserRouter>   \n    );    \n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}